(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("jquery"), require("knockout"));
	else if(typeof define === 'function' && define.amd)
		define("algorithm", ["jquery", "knockout"], factory);
	else if(typeof exports === 'object')
		exports["algorithm"] = factory(require("jquery"), require("knockout"));
	else
		root["algorithm"] = factory(root["jQuery"], root["ko"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_1__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_1__;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"algorithm-view-template\">\r\n    <!-- ko with: $data -->\r\n    <div class=\"algorithm-view-holder\">\r\n        <!-- ko if: addonsTemplate -->\r\n        <div class=\"algorithm-addons\" data-bind=\"style: { 'width': addonsWidth() + 'px' }\">\r\n            <!-- ko foreach: blocks -->\r\n            <div class=\"algorithm-addon-holder\" data-bind=\"style: { 'height': height() + 'px', 'marginBottom': $parent.blockMinDistance() + 'px' }\">\r\n                <!-- ko template: $parent.addonsTemplate -->\r\n                <!-- /ko -->\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n        <!-- /ko -->\r\n        <div class=\"algorithm-transitions\" data-bind=\"style: { 'left': addonsWidth() + 'px', 'width': connectorsAreaWidth() + 'px' }\">\r\n            <!-- ko foreach: transitions -->\r\n            <!-- ko template: template -->\r\n            <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"algorithm-blocks\" data-bind=\"draggableblocks: $data, style: { 'left': addonsWidth() + connectorsAreaWidth() + 'px', width: blockWidth() + 'px' }\">\r\n            <!-- ko foreach: blocks -->\r\n            <!-- ko template: template -->\r\n            <!-- /ko -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"algorithm-comments\" data-bind=\"style: { 'top': -blockMinDistance() + 'px', 'left': addonsWidth() + connectorsAreaWidth() + blockWidth() + 'px', width: commentWidth() + 'px' }\">\r\n            <!-- ko foreach: blocks -->\r\n            <div style=\"position: relative\" data-bind=\"style: { 'height': height() + 'px', 'lineHeight': height() + 'px', 'margin': $parent.blockMinDistance() + 'px 0' }\">\r\n                <!-- ko if: comment -->\r\n                <div style=\"position:absolute; top: 0; left:0; width: 40px; height: 100%\">\r\n                    <svg width=\"100%\" height=\"100%\">\r\n                        <line y1=\"50%\" y2=\"50%\" x1=\"0%\" x2=\"100%\" style=\"stroke:gray;\"></line>\r\n                    </svg>\r\n                </div>\r\n                <div class=\"algorithm-comment-content\">\r\n                    <span data-bind=\"text: comment\"></span>\r\n                </div>\r\n                <!-- /ko -->\r\n            </div>\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"algorithm-block-details-container\" data-bind=\"algodetails: $data\">\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-details-template\">\r\n    <div class=\"algorithm-details-holder\">\r\n        <div class=\"algorithm-details-template-holder\">\r\n            <!-- ko template: { name: detailTemplate, data: currentBlock } -->\r\n            <!-- /ko -->\r\n        </div>\r\n        <div class=\"algorithm-details-actions-holder\">\r\n            <div class=\"algorithm-button\" data-bind=\"click: function() { $data.isEditMode(false); }, text: closeTitle\"></div>\r\n        </div>\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-default-details-template\">\r\n    <!-- ko with: $data -->\r\n    <div class=\"algo-detail-field\">\r\n        <span class=\"algo-detail-label\">Text: </span>\r\n        <div class=\"algo-detail-value-wrapper\">\r\n            <input class=\"algo-detail-value\" data-bind=\"value: text\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"algo-detail-field\">\r\n        <span class=\"algo-detail-label\">Comment: </span>\r\n        <div class=\"algo-detail-value-wrapper\">\r\n            <input class=\"algo-detail-value\" data-bind=\"value: comment\" />\r\n        </div>\r\n    </div>\r\n    <div class=\"algo-detail-field\">\r\n        <span class=\"algo-detail-label\">State: </span>\r\n        <div class=\"algo-detail-value-wrapper\">\r\n            <select data-bind=\"options: [ 'inprogress', 'completed' ], value: state, optionsCaption: 'Choose state...'\"></select>\r\n        </div>\r\n    </div>\r\n    <div class=\"algo-detail-field\">\r\n        <span class=\"algo-detail-label\">Is Condition: </span>\r\n        <div class=\"algo-detail-value-wrapper\">\r\n            <input type=\"checkbox\" data-bind=\"checked: isCondition\" />\r\n        </div>\r\n    </div>\r\n    <!-- /ko -->\r\n</script>"

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"algorithm-block-item-template\">\r\n    <div class=\"algorithm-block algorithm-block-item\" data-bind=\"style: { 'height': height() + 'px', 'lineHeight': height() + 'px', 'margin': $parent.blockMinDistance() + 'px 0' }, css: { 'algorithm-block-inprogress': state() === 'inprogress', 'algorithm-block-teminator': isTerminator }, click: function() { $parent.clickBlock($data); }\">\r\n        <div class=\"algorithm-block-shadow\"></div>\r\n        <div class=\"algorithm-block-content\" data-bind=\"style: { 'lineHeight': height() + 'px' }, text: text\"></div>\r\n        <!-- ko if: num() -->\r\n        <div class=\"algorithm-block-num\" data-bind=\"text: num\"></div>\r\n        <!-- /ko -->\r\n        <!-- ko if: state() === \"completed\" -->\r\n        <div style=\"position:absolute; top:-0.5em; line-height: 1em; right:15px;\">\r\n            <span style=\"color: green; font-family: wingdings; font-size: 200%;\">&#252;</span><!-- &#251; -->\r\n        </div>\r\n        <!-- /ko -->\r\n        <!-- ko template: \"algorithm-block-controls\" -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-block-condition-template\">\r\n    <div class=\"algorithm-block algorithm-block-condition\" data-bind=\"style: { 'height': height() + 'px', 'lineHeight': height() + 'px', 'margin': $parent.blockMinDistance() + 'px 0' }, click: function() { $parent.clickBlock($data); }\">\r\n        <div class=\"algorithm-block-shadow\">\r\n            <svg width='100%' height='100%' style=\"position:absolute;left:0;\">\r\n                <defs>\r\n                    <filter id=\"algorithm-block-shadow-filter\" x=\"-0.5\" y=\"-0.5\" width=\"200%\" height=\"200%\">\r\n                        <feOffset result=\"offOut\" in=\"SourceAlpha\" dx=\"0\" dy=\"0\" />\r\n                        <feGaussianBlur result=\"blurOut\" in=\"offOut\" stdDeviation=\"0.1\" />\r\n                        <feBlend in=\"SourceGraphic\" in2=\"blurOut\" mode=\"normal\" />\r\n                    </filter>\r\n                </defs>\r\n                <polygon data-bind=\"attr: { 'points': '0 ' + height()/2 + ', ' + $parent.blockWidth()/2 + ' 0, ' + $parent.blockWidth() + ' ' + height()/2 + ', ' + $parent.blockWidth()/2 + ' ' + height() }\" style=\"stroke:gray;stroke-width:1\" filter=\"url(#algorithm-block-shadow-filter)\" />\r\n            </svg>\r\n        </div>\r\n        <svg height=\"100%\" width=\"100%\" style=\"position:absolute;left:0;\">\r\n            <polygon data-bind=\"attr: { 'points': '0 ' + height()/2 + ', ' + $parent.blockWidth()/2 + ' 0, ' + $parent.blockWidth() + ' ' + height()/2 + ', ' + $parent.blockWidth()/2 + ' ' + height() }\" style=\"fill:white;stroke:black;stroke-width:1\" />\r\n        </svg>\r\n        <div class=\"algorithm-condition-content\" data-bind=\"style: { 'lineHeight': height() + 'px' }, text: text\"></div>\r\n        <!-- ko if: num() -->\r\n        <div class=\"algorithm-block-num\" data-bind=\"text: num\"></div>\r\n        <!-- /ko -->\r\n        <!-- ko template: \"algorithm-block-controls\" -->\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-block-controls\">\r\n    <!-- ko if: $parent.allowEdit -->\r\n    <div class=\"algorithm-block-controls\">\r\n        <div class=\"algorithm-block-command algorithm-hint algorithm-block-command-add\" data-bind=\"click: function() { $parent.addBlock($data, true); }, attr: { 'data-title': $parent.addBeforeTitle }\"></div>\r\n        <div class=\"algorithm-block-command algorithm-hint algorithm-block-command-edit\" data-bind=\"click: function() { $parent.editBlock($data); }, attr: { 'data-title': $parent.editTitle }\"></div>\r\n        <div class=\"algorithm-block-command algorithm-hint algorithm-block-command-connect\" draggable=\"true\" data-bind=\"attr: { 'data-title': $parent.connectTitle }\"></div>\r\n        <!-- ko if: $parent.blocks().length > 1 -->\r\n        <div class=\"algorithm-block-command algorithm-hint algorithm-block-command-remove\" data-bind=\"click: function() { $parent.removeBlock($data); }, attr: { 'data-title': $parent.removeTitle }\"></div>\r\n        <!-- /ko -->\r\n        <div class=\"algorithm-block-command algorithm-hint algorithm-block-command-add\" data-bind=\"click: function() { $parent.addBlock($data); }, attr: { 'data-title': $parent.addAfterTitle }\"></div>\r\n    </div>\r\n    <div class=\"algorithm-condition-connector algorithm-condition-connector-no algorithm-hint\" draggable=\"true\" data-bind=\"style: { 'top': height()/2-8 + 'px' }, attr: { 'data-title': $parent.noTitle, 'data-transition': $parent.noTitle }\"></div>\r\n    <!-- /ko -->\r\n</script>\r\n"

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = "<script type=\"text/html\" id=\"algorithm-tr-direct-template\">\r\n    <div style=\"width:1px; border:1px solid black; border-right:none; position:absolute;\" data-bind=\"style: { top: startBlock().posY() + startBlock().height() + 'px', height: $parent.blockMinDistance() + 'px', left: $parent.connectorsAreaWidth() + $parent.blockWidth() / 2 + 'px' }\">\r\n        <!-- ko if: label() -->\r\n        <div style=\"position:absolute; top:-2px; left:6px; background-color: white;\" data-bind=\"text: label\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-tr-far-up-template\">\r\n    <div style=\"border:1px solid black; border-right:none; border-radius: 5px 0 0 5px; position:absolute;\" data-bind=\"style: { top: (endBlock().posY() - $parent.blockMinDistance() / 2 - 1) + 'px', height: (startBlock().posY() - endBlock().posY() + $parent.blockMinDistance() / 2 + startBlock().height() / 2 + 1) + 'px', left: ($parent.connectorsAreaWidth() - level() * $parent.blockMinDistance()) + 'px', width: level() * $parent.blockMinDistance() + $parent.blockWidth() / 2 + 'px' }\">\r\n        <div class=\"connector-far-up-arrow\">\r\n            <svg width=\"100%\" height=\"100%\">\r\n                <line y1=\"25%\" y2=\"50%\" x1=\"50%\" x2=\"100%\" style=\"stroke:black;stroke-width:1\"></line>\r\n                <line y1=\"75%\" y2=\"50%\" x1=\"50%\" x2=\"100%\" style=\"stroke:black;stroke-width:1\"></line>\r\n            </svg>\r\n        </div>\r\n        <div class=\"connector-far-up-arrow-to-block\" style=\"border-right: 1px solid black; position: absolute; top: -1px; right: -1px; height: 10px;\"></div>\r\n        <!-- ko if: label() -->\r\n        <div class=\"connector-label\" data-bind=\"text: label\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n\r\n<script type=\"text/html\" id=\"algorithm-tr-far-down-template\">\r\n    <div style=\"border:1px solid black; border-right:none; border-radius: 5px 0 0 5px; position:absolute;\" data-bind=\"style: { top: (startBlock().posY() + startBlock().height() / 2) + 'px', height: (endBlock().posY() - startBlock().posY() - $parent.blockMinDistance() / 2 - endBlock().height() / 2) + 'px', left: ($parent.connectorsAreaWidth() - level() * $parent.blockMinDistance()) + 'px', width: level() * $parent.blockMinDistance() + $parent.blockWidth() / 2 + 'px' }\">\r\n        <div class=\"connector-far-down-arrow\">\r\n            <svg width=\"100%\" height=\"100%\">\r\n                <line y1=\"25%\" y2=\"50%\" x1=\"50%\" x2=\"100%\" style=\"stroke:black;stroke-width:1\"></line>\r\n                <line y1=\"75%\" y2=\"50%\" x1=\"50%\" x2=\"100%\" style=\"stroke:black;stroke-width:1\"></line>\r\n            </svg>\r\n        </div>\r\n        <div class=\"connector-far-down-arrow-to-block\" style=\"border-right: 1px solid black; position: absolute; bottom: -11px; right: -1px; height: 11px;\"></div>\r\n        <!-- ko if: label() -->\r\n        <div class=\"connector-label\" data-bind=\"text: label\"></div>\r\n        <!-- /ko -->\r\n    </div>\r\n</script>\r\n"

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var $ = __webpack_require__(0);
var ko = __webpack_require__(1);
var Algorithm;
(function (Algorithm) {
    var AlgorithmViewModel = (function () {
        function AlgorithmViewModel(options) {
            var _this = this;
            this._MaxId = -1;
            this.blocks = ko.observableArray();
            this.transitions = ko.observableArray();
            this.maxLevel = ko.observable(1);
            this.blockMinDistance = ko.observable(20);
            this.addonsTemplate = ko.observable();
            this.addonsWidth = ko.computed(function () { return !_this.addonsTemplate() ? 0 : _this.containerWidth() * 0.2; });
            this.connectorsAreaWidth = ko.computed(function () { return _this.maxLevel() * _this.blockMinDistance(); });
            this.containerWidth = ko.observable(500);
            this.blockWidth = ko.computed(function () { return (_this.containerWidth() - _this.connectorsAreaWidth() - _this.addonsWidth()) * 0.6; });
            this.commentWidth = ko.computed(function () { return _this.containerWidth() - _this.blockWidth() - _this.connectorsAreaWidth() - _this.addonsWidth(); });
            this.currentBlock = ko.observable();
            this.detailTemplate = "algorithm-default-details-template";
            this.isEditMode = ko.observable(false);
            this.allowEdit = true;
            this._blockMappings = $.extend(true, {}, {
                id: "id",
                text: "text",
                comment: "comment",
                num: "num",
                state: "state",
                detailTemplate: "algorithm-default-details-template",
                new: function (idVal) {
                    return { id: idVal };
                },
                change: function (kind, object) {
                },
                click: function (block) {
                },
                customEdit: function (block) {
                }
            }, options.blockMappings);
            this.detailTemplate = this._blockMappings.detailTemplate;
            this.addonsTemplate(options.addonsTemplate);
            this._transitionMappings = $.extend(true, {}, {
                iid: "iid",
                exit1: "exit1",
                exit2: "exit2",
                new: function (idVal) {
                    return {};
                },
                change: function (kind, object) {
                }
            }, options.transitionMappings);
            this.allowEdit = options.allowEdit !== false;
            options.items.forEach(function (item) {
                var block = new AlgorithmItemBlockModel(item, _this._blockMappings);
                if (block.id() > _this._MaxId) {
                    _this._MaxId = block.id();
                }
                _this.blocks.push(block);
            });
            options.transitions.forEach(function (transition) {
                if (ko.unwrap(transition[_this._transitionMappings.exit1])) {
                    _this.transitions.push(new AlgorithmTransition(_this.findBlock(ko.unwrap(transition[_this._transitionMappings.iid])), _this.findBlock(ko.unwrap(transition[_this._transitionMappings.exit1])), transition, _this._transitionMappings));
                }
                if (ko.unwrap(transition[_this._transitionMappings.exit2])) {
                    var newTransition = new AlgorithmTransition(_this.findBlock(ko.unwrap(transition[_this._transitionMappings.iid])), _this.findBlock(ko.unwrap(transition[_this._transitionMappings.exit2])), transition, _this._transitionMappings);
                    newTransition.label(_this.noTitle);
                    _this.transitions.push(newTransition);
                }
            });
            this._sortBlocks();
            this._updateLayout();
            this.blocks.subscribe(function (changes) {
                changes.forEach(function (change) { return _this._blockMappings.change(change.status, change.value); });
            }, null, "arrayChange");
            this.transitions.subscribe(function (changes) {
                changes.forEach(function (change) { return _this._transitionMappings.change(change.status, change.value); });
            }, null, "arrayChange");
            this.isEditMode.subscribe(function (newValue) {
                if (!newValue) {
                    _this._blockMappings.change("edit", _this.currentBlock());
                }
            });
        }
        AlgorithmViewModel.prototype._collectFollowingBlocks = function (sortResult, filter, otherThreads) {
            var _this = this;
            if (otherThreads === void 0) { otherThreads = []; }
            var followingBlocks = this.blocks().filter(filter), otherThreadsForChild = otherThreads.concat(followingBlocks);
            followingBlocks.forEach(function (currentBlock) {
                var currentBlockHasKnownAncestor = _this._findTransitionsTo(currentBlock).filter(function (transitionTo) { return otherThreads.indexOf(transitionTo.startBlock()) !== -1; }).length !== 0;
                if (sortResult.indexOf(currentBlock) === -1 && !currentBlockHasKnownAncestor) {
                    sortResult.push(currentBlock);
                    while (otherThreadsForChild.indexOf(currentBlock) !== -1) {
                        otherThreadsForChild.splice(otherThreadsForChild.indexOf(currentBlock), 1);
                    }
                    _this._collectFollowingBlocks(sortResult, function (block) { return _this._findTransitionsTo(block).filter(function (transitionTo) { return transitionTo.startBlock() === currentBlock; }).length !== 0; }, otherThreadsForChild);
                }
            });
        };
        AlgorithmViewModel.prototype._sortBlocks = function () {
            var _this = this;
            var sortResult = [];
            this._collectFollowingBlocks(sortResult, function (block) { return _this._findTransitionsTo(block).length === 0; });
            this.blocks(sortResult);
        };
        AlgorithmViewModel.prototype._findTransitionsFrom = function (block) {
            return this.transitions().filter(function (transition) { return transition.startBlock() === block; });
        };
        AlgorithmViewModel.prototype._findTransitionsTo = function (block) {
            return this.transitions().filter(function (transition) { return transition.endBlock() === block; });
        };
        AlgorithmViewModel.prototype._isFitToLayoutLine = function (layoutLine, transitionLine) {
            var result = true;
            layoutLine.forEach(function (tl) {
                if (result) {
                    if (tl.start > transitionLine.start) {
                        result = transitionLine.start + transitionLine.length <= tl.start;
                    }
                    else {
                        result = tl.start + tl.length <= transitionLine.start;
                    }
                }
            });
            return result;
        };
        AlgorithmViewModel.prototype._prepareTransitions = function () {
            var _this = this;
            var farTransitionLines = [];
            var loopTransitions = [];
            this.transitions().forEach(function (transition) {
                if (transition.startBlock() === transition.endBlock()) {
                    loopTransitions.push(transition);
                }
                else {
                    transition.level(1);
                    var startIndex = _this.blocks().indexOf(transition.startBlock());
                    var endIndex = _this.blocks().indexOf(transition.endBlock());
                    if (endIndex - startIndex === 1) {
                        transition.type("direct");
                    }
                    else {
                        transition.type("far");
                        if (endIndex > startIndex) {
                            transition.direction("down");
                            farTransitionLines.push({ transition: transition, start: startIndex, length: endIndex - startIndex });
                        }
                        else {
                            transition.direction("up");
                            farTransitionLines.push({ transition: transition, start: endIndex, length: startIndex - endIndex });
                        }
                    }
                }
            });
            loopTransitions.forEach(function (transition) { _this.transitions.remove(transition); });
            farTransitionLines.sort(function (t1, t2) { return t1.length - t2.length; });
            var layoutLines = [];
            while (farTransitionLines.length > 0) {
                var fitToLine = false;
                layoutLines.forEach(function (layoutLine, index) {
                    if (!fitToLine && _this._isFitToLayoutLine(layoutLine, farTransitionLines[0])) {
                        var transitionLineToPush = farTransitionLines.splice(0, 1)[0];
                        transitionLineToPush.transition.level(index + 1);
                        layoutLine.push(transitionLineToPush);
                        fitToLine = true;
                    }
                });
                if (!fitToLine) {
                    layoutLines.push([]);
                }
            }
            this.maxLevel(layoutLines.length + 1);
        };
        AlgorithmViewModel.prototype._updateLayout = function () {
            var _this = this;
            this.blocks().reduce(function (posY, block) {
                var isStart = _this._findTransitionsTo(block).length === 0;
                var isEnd = _this._findTransitionsFrom(block).length === 0;
                block.isTerminator(isStart || isEnd);
                block.isCondition(_this._findTransitionsFrom(block).filter(function (transition) { return transition.label() === _this.noTitle; }).length !== 0);
                block.posY(posY);
                return posY + block.height() + _this.blockMinDistance();
            }, 0);
            this._prepareTransitions();
        };
        Object.defineProperty(AlgorithmViewModel.prototype, "model", {
            get: function () {
                var model = { items: [], transitions: [] };
                this.blocks().forEach(function (block) { return model.items.push(block.item); });
                this.transitions().forEach(function (transition) { return model.transitions.push(transition.transition); });
                return model;
            },
            enumerable: true,
            configurable: true
        });
        AlgorithmViewModel.prototype.findBlock = function (id) {
            return this.blocks().filter(function (block) { return block.id() === id; })[0];
        };
        AlgorithmViewModel.prototype.addBlock = function (block, isBefore) {
            var _this = this;
            if (isBefore === void 0) { isBefore = false; }
            var newBlock = new AlgorithmItemBlockModel(this._blockMappings.new(++this._MaxId), this._blockMappings);
            this.blocks.splice(this.blocks().indexOf(block) + (isBefore ? 0 : 1), 0, newBlock);
            if (isBefore) {
                this._findTransitionsTo(block).forEach(function (transition) {
                    transition.endBlock(newBlock);
                    _this._transitionMappings.change("edit", transition);
                });
                this.transitions.push(new AlgorithmTransition(newBlock, block, this._transitionMappings.new(++this._MaxId), this._transitionMappings));
            }
            else {
                this._findTransitionsFrom(block).forEach(function (transition) {
                    transition.startBlock(newBlock);
                    _this._transitionMappings.change("edit", transition);
                });
                this.transitions.push(new AlgorithmTransition(block, newBlock, this._transitionMappings.new(++this._MaxId), this._transitionMappings));
            }
            this._updateLayout();
        };
        AlgorithmViewModel.prototype.removeBlock = function (block) {
            var _this = this;
            this._findTransitionsTo(block).forEach(function (transition) {
                _this._findTransitionsFrom(block).forEach(function (transitionFrom) {
                    transition.endBlock(transitionFrom.endBlock());
                    _this._transitionMappings.change("edit", transition);
                });
            });
            this._findTransitionsFrom(block).forEach(function (transition) {
                _this.transitions.remove(transition);
            });
            this.blocks.remove(block);
            this._updateLayout();
        };
        AlgorithmViewModel.prototype.editBlock = function (block) {
            this.currentBlock(block);
            if (!this._blockMappings.customEdit(block)) {
                this.isEditMode(!this.isEditMode());
            }
        };
        AlgorithmViewModel.prototype.clickBlock = function (block) {
            this._blockMappings.click(block);
        };
        AlgorithmViewModel.prototype.updateTransition = function (fromBlock, toBlock, label, preserveTransitions) {
            if (preserveTransitions === void 0) { preserveTransitions = false; }
            var fromTransitions = this._findTransitionsFrom(fromBlock).filter(function (transition) { return transition.label() === label; });
            if (preserveTransitions) {
                if (fromTransitions.filter(function (transition) { return transition.endBlock() === toBlock; }).length === 0) {
                    var newTransition = new AlgorithmTransition(fromBlock, toBlock, this._transitionMappings.new(++this._MaxId), this._transitionMappings);
                    newTransition.label(label);
                    this.transitions.push(newTransition);
                }
            }
            else {
                if (fromTransitions.length === 0) {
                    var newTransition = new AlgorithmTransition(fromBlock, toBlock, this._transitionMappings.new(++this._MaxId), this._transitionMappings);
                    newTransition.label(label);
                    this.transitions.push(newTransition);
                }
                else {
                    fromTransitions[0].endBlock(toBlock);
                    this._transitionMappings.change("edit", fromTransitions[0]);
                    for (var i = 1; i < fromTransitions.length; i++) {
                        this.transitions.remove(fromTransitions[i]);
                    }
                }
            }
            this._updateLayout();
        };
        Object.defineProperty(AlgorithmViewModel.prototype, "addBeforeTitle", {
            get: function () { return AlgorithmViewModel.addBeforeTitle; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "addAfterTitle", {
            get: function () { return AlgorithmViewModel.addAfterTitle; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "editTitle", {
            get: function () { return AlgorithmViewModel.titleEdit; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "removeTitle", {
            get: function () { return AlgorithmViewModel.titleRemove; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "connectTitle", {
            get: function () { return AlgorithmViewModel.connectTitle; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "yesTitle", {
            get: function () { return AlgorithmViewModel.yesTitle; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "noTitle", {
            get: function () { return AlgorithmViewModel.noTitle; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AlgorithmViewModel.prototype, "closeTitle", {
            get: function () { return AlgorithmViewModel.closeTitle; },
            enumerable: true,
            configurable: true
        });
        return AlgorithmViewModel;
    }());
    AlgorithmViewModel.yesTitle = "yes";
    AlgorithmViewModel.noTitle = "no";
    AlgorithmViewModel.addBeforeTitle = "Add block before";
    AlgorithmViewModel.addAfterTitle = "Add block after";
    AlgorithmViewModel.titleEdit = "Edit block";
    AlgorithmViewModel.titleRemove = "Remove block";
    AlgorithmViewModel.connectTitle = "Drag to connect to...";
    AlgorithmViewModel.closeTitle = "Close";
    Algorithm.AlgorithmViewModel = AlgorithmViewModel;
    var ItemHolder = (function () {
        function ItemHolder(item, mappings) {
            var _this = this;
            this._mappings = $.extend({}, mappings);
            this._item = item;
            $.each(this._mappings, function (name, value) {
                var _innerName = "_" + name;
                _this[_innerName] = ko.isObservable(_this._item[value]) ? _this._item[value] : ko.observable(_this._item[value]);
                _this[name] = ko.computed({
                    read: function () {
                        return _this[_innerName]();
                    },
                    write: function (val) {
                        _this[_innerName](val);
                        if (!ko.isObservable(_this._item[value])) {
                            _this._item[value] = val;
                        }
                    }
                });
            });
        }
        Object.defineProperty(ItemHolder.prototype, "item", {
            get: function () {
                return this._item;
            },
            enumerable: true,
            configurable: true
        });
        return ItemHolder;
    }());
    Algorithm.ItemHolder = ItemHolder;
    var AlgorithmItemBlockModel = (function (_super) {
        __extends(AlgorithmItemBlockModel, _super);
        function AlgorithmItemBlockModel(item, mappings) {
            var _this = _super.call(this, item, mappings || {
                id: "id",
                text: "text",
                comment: "comment",
                num: "num",
                state: "state"
            }) || this;
            _this.isTerminator = ko.observable(false);
            _this.isCondition = ko.observable(false);
            _this.template = ko.computed(function () {
                return _this.isCondition() ? "algorithm-block-condition-template" : "algorithm-block-item-template";
            });
            _this.height = ko.observable(50);
            _this.posY = ko.observable(0);
            return _this;
        }
        return AlgorithmItemBlockModel;
    }(ItemHolder));
    Algorithm.AlgorithmItemBlockModel = AlgorithmItemBlockModel;
    var AlgorithmTransition = (function (_super) {
        __extends(AlgorithmTransition, _super);
        function AlgorithmTransition(startBlock, endBlock, item, mappings) {
            var _this = _super.call(this, item, mappings || {
                iid: "iid",
                exit1: "exit1",
                exit2: "exit2"
            }) || this;
            _this.startBlock = ko.observable();
            _this.endBlock = ko.observable();
            _this.type = ko.observable("direct");
            _this.direction = ko.observable("down");
            _this.level = ko.observable(1);
            _this.label = ko.observable();
            _this.template = ko.computed(function () {
                if (_this.type() !== "direct") {
                    return _this.direction() === "down" ? "algorithm-tr-far-down-template" : "algorithm-tr-far-up-template";
                }
                return "algorithm-tr-direct-template";
            });
            _this.startBlock(startBlock);
            _this.endBlock(endBlock);
            return _this;
        }
        Object.defineProperty(AlgorithmTransition.prototype, "transition", {
            get: function () {
                if (this.label() !== AlgorithmViewModel.noTitle) {
                    return { iid: this.startBlock().id(), exit1: this.endBlock().id(), exit2: undefined };
                }
                else {
                    return { iid: this.startBlock().id(), exit1: undefined, exit2: this.endBlock().id() };
                }
            },
            enumerable: true,
            configurable: true
        });
        return AlgorithmTransition;
    }(ItemHolder));
    Algorithm.AlgorithmTransition = AlgorithmTransition;
})(Algorithm || (Algorithm = {}));
module.exports = Algorithm;


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var $ = __webpack_require__(0);
var ko = __webpack_require__(1);
__webpack_require__(2);
var templateA = __webpack_require__(3);
var templateB = __webpack_require__(4);
var templateT = __webpack_require__(5);
var algorithm_1 = __webpack_require__(6);
var Algorithm;
(function (Algorithm) {
    function createFragment(htmlString) {
        var fragment = document.createDocumentFragment(), temp = document.createElement("div");
        temp.innerHTML = htmlString;
        while (temp.firstChild) {
            fragment.appendChild(temp.firstChild);
        }
        return fragment;
    }
    Algorithm.createFragment = createFragment;
    document.body.insertBefore(createFragment(templateA), document.body.childNodes[0]);
    document.body.insertBefore(createFragment(templateB), document.body.childNodes[0]);
    document.body.insertBefore(createFragment(templateT), document.body.childNodes[0]);
    ko.bindingHandlers["algorithm"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var options = ko.unwrap(valueAccessor());
            var $algorithmTemplate = $("#algorithm-view-template"), algorithmViewHolderWidth = ko.observable(500), model = ko.observable(new algorithm_1.AlgorithmViewModel(ko.unwrap(options.value))), valueSubscription, childContext = bindingContext.createChildContext(model);
            if (ko.isSubscribable(options.value)) {
                valueSubscription = options.value.subscribe(function (newAlgorithm) { return model(new algorithm_1.AlgorithmViewModel(newAlgorithm)); });
            }
            $(element).children().remove();
            $(element).append($($algorithmTemplate.text()));
            ko.applyBindingsToDescendants(childContext, element);
            var intervalId = setInterval(function () {
                model().containerWidth($(element).find(".algorithm-view-holder").width());
            }, 500);
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                clearInterval(intervalId);
                if (valueSubscription) {
                    valueSubscription.dispose();
                }
            });
            return { controlsDescendantBindings: true };
        },
        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        }
    };
    ko.bindingHandlers["algodetails"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var model = ko.unwrap(valueAccessor());
            var $element = $(element), $algorithmTemplate = $("#algorithm-details-template"), childContext = bindingContext.createChildContext(model);
            $(element).children().remove();
            $(element).append($($algorithmTemplate.text()));
            var subscription = model.isEditMode.subscribe(function (value) {
                var originalBlockRect = { top: model.currentBlock().posY() + "px", left: model.connectorsAreaWidth() + "px", height: model.currentBlock().height() + "px", width: model.blockWidth() + "px" };
                if (value) {
                    $element.css(originalBlockRect);
                    $element.show();
                    $element.animate({ "top": "-=" + (model.currentBlock().posY() > 200 ? 200 : model.currentBlock().posY()) + "px", "left": "0", "height": "+=400px", "width": "100%" });
                }
                else {
                    $element.animate(originalBlockRect, {
                        complete: function () {
                            $element.hide();
                        }
                    });
                }
            });
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                subscription.dispose();
            });
            ko.applyBindingsToDescendants(childContext, element);
            return { controlsDescendantBindings: true };
        }
    };
    ko.bindingHandlers["draggableblocks"] = {
        init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var model = ko.unwrap(valueAccessor()), $element = $(element), dragEvents = {
                "dragstart": function (ev) {
                    var originalEvent = ev.originalEvent, block = ko.dataFor(originalEvent.target);
                    if (block instanceof algorithm_1.AlgorithmItemBlockModel) {
                        var transitionType = $(ev.target).attr("data-transition");
                        originalEvent.dataTransfer.effectAllowed = "link";
                        originalEvent.dataTransfer.setData("text", JSON.stringify({ "type": "AlgorithmItemBlockModel", "id": block.id(), "transitionType": transitionType }));
                        return true;
                    }
                },
                "dragover": function (ev) {
                    if (ko.dataFor(ev.target) instanceof algorithm_1.AlgorithmItemBlockModel) {
                        ev.preventDefault();
                    }
                },
                "drop": function (ev) {
                    var originalEvent = ev.originalEvent, targetBlock = ko.dataFor(originalEvent.target);
                    if (targetBlock instanceof algorithm_1.AlgorithmItemBlockModel) {
                        var dragDataString = originalEvent.dataTransfer.getData("text");
                        try {
                            var dragData = JSON.parse(dragDataString);
                            if (dragData.type === 'AlgorithmItemBlockModel') {
                                var sourceBlock = model.findBlock(dragData.id);
                                if (!!sourceBlock && !!targetBlock) {
                                    model.updateTransition(sourceBlock, targetBlock, dragData.transitionType, ev.ctrlKey);
                                    ev.stopPropagation();
                                }
                            }
                        }
                        catch (ex) { }
                    }
                }
            };
            $element.bind(dragEvents);
        }
    };
})(Algorithm || (Algorithm = {}));


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,